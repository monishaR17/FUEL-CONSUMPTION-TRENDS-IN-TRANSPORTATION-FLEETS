# -*- coding: utf-8 -*-
"""dapproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tTOceo0TAac2Q3oF2UT2Kam4L5AVcCSi

FUEL CONSUMPTION TRENDS IN TRANSPORTATION FLEETS

Handling missing values (fuel logs, vehicle ID), Statistical summarization (average fuel consumption per trip), Data aggregation (fuel usage per vehicle type), Comparative analysis (efficiency across models), Trend identification (fuel efficiency trends)

LOADING THE DATASET
"""

import pandas as pd

# Load the dataset
file_path = '/content/fuel_consumption.csv'
data = pd.read_csv(file_path)

print(data.head())

"""HANDLING MISSING VALUES (fuel logs, vehicle ID)"""

# Check for missing values in the dataset
missing_values = data.isnull().sum()

# Focus on columns related to "Fuel" and "Fuel Consumption"
print(missing_values[['FUEL', 'FUEL CONSUMPTION']])

# If you want to handle missing values (e.g., fill or drop them):
# Option 1: Fill missing values with a placeholder (e.g., 'Unknown' for 'FUEL', mean for 'FUEL CONSUMPTION')
data['FUEL'].fillna('Unknown', inplace=True)
data['FUEL CONSUMPTION'].fillna(data['FUEL CONSUMPTION'].mean(), inplace=True)

# Verify the changes
print(data.head())

"""STATISTICAL SUMMARIZATION (average fuel consumption per trip)"""

# Calculate the average fuel consumption
average_fuel_consumption = data['FUEL CONSUMPTION'].mean()

# Print the result
print(f"The average fuel consumption per trip is: {average_fuel_consumption:.2f} L/100km")

"""DATA AGGREGATION (fuel usage per vehicle type),"""

# Group the data by vehicle class and calculate the average fuel consumption per class
aggregated_data = data.groupby('VEHICLE CLASS')['FUEL CONSUMPTION'].mean().reset_index()

# Sort the data by fuel consumption for better visualization
aggregated_data = aggregated_data.sort_values(by='FUEL CONSUMPTION', ascending=False)

# Display the aggregated data
print(aggregated_data)

"""VISUALIZATION(fuel usage per vehicle type)"""

import matplotlib.pyplot as plt
import seaborn as sns

# Set up the seaborn style for visualization
sns.set(style="whitegrid")

# Create a bar plot for fuel consumption per vehicle type
plt.figure(figsize=(10, 6))
sns.barplot(x='FUEL CONSUMPTION', y='VEHICLE CLASS', data=aggregated_data, palette='viridis')

# Add labels and title
plt.xlabel('Average Fuel Consumption (L/100km)')
plt.ylabel('Vehicle Class')
plt.title('Average Fuel Consumption per Vehicle Class')

# Display the plot
plt.show()

"""COMPARATIVE ANALYSIS (efficiency across models)"""

import pandas as pd

# Load the dataset
file_path = '/content/fuel_consumption.csv'
data = pd.read_csv(file_path)

# Group by Make and Model to calculate the average fuel consumption for each model
aggregated_data_models = data.groupby(['MAKE', 'MODEL'])['FUEL CONSUMPTION'].mean().reset_index()

# Sort the data by fuel consumption in descending order for better comparison
aggregated_data_models = aggregated_data_models.sort_values(by='FUEL CONSUMPTION', ascending=False)

# Display the results
print(aggregated_data_models)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/content/fuel_consumption.csv'
data = pd.read_csv(file_path)

# Group by Make and Model to calculate the average fuel consumption for each model
aggregated_data_models = data.groupby(['MAKE', 'MODEL'])['FUEL CONSUMPTION'].mean().reset_index()

# Set up the seaborn style for visualization
sns.set(style="whitegrid")

# Create a scatter plot to compare fuel consumption across different models
plt.figure(figsize=(12, 72))
sns.scatterplot(x='FUEL CONSUMPTION', y='MODEL', data=aggregated_data_models, hue='MAKE', palette='deep', s=100)

# Add labels and title
plt.xlabel('Average Fuel Consumption (L/100km)')
plt.ylabel('Vehicle Model')
plt.title('Comparative Fuel Consumption Across Vehicle Models')

# Display the plot
plt.show()

"""TREND IDENTIFICATION (fuel efficiency trends)


"""

# Group by Year to calculate the average fuel consumption for each year
fuel_efficiency_trend = data.groupby('Year')['FUEL CONSUMPTION'].mean().reset_index()

# Display the results (average fuel consumption per year)
print(fuel_efficiency_trend)